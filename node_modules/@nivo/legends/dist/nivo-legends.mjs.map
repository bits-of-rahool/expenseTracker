{"version":3,"file":"nivo-legends.mjs","sources":["../src/svg/symbols/SymbolCircle.tsx","../src/svg/symbols/SymbolDiamond.tsx","../src/svg/symbols/SymbolSquare.tsx","../src/svg/symbols/SymbolTriangle.tsx","../src/defaults.ts","../src/compute.ts","../src/svg/ContinuousColorsLegendSvg.tsx","../src/svg/AnchoredContinuousColorsLegendSvg.tsx","../src/svg/LegendSvgItem.tsx","../src/svg/LegendSvg.tsx","../src/svg/BoxLegendSvg.tsx","../src/canvas.ts","../src/hooks.ts"],"sourcesContent":["import { SymbolProps } from './types'\n\nexport const SymbolCircle = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <circle\n            r={size / 2}\n            cx={x + size / 2}\n            cy={y + size / 2}\n            fill={fill}\n            opacity={opacity}\n            strokeWidth={borderWidth}\n            stroke={borderColor}\n            style={{\n                pointerEvents: 'none',\n            }}\n        />\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolDiamond = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <g transform={`translate(${x},${y})`}>\n            <path\n                d={`\n                    M${size / 2} 0\n                    L${size * 0.8} ${size / 2}\n                    L${size / 2} ${size}\n                    L${size * 0.2} ${size / 2}\n                    L${size / 2} 0\n                `}\n                fill={fill}\n                opacity={opacity}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                style={{\n                    pointerEvents: 'none',\n                }}\n            />\n        </g>\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolSquare = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <rect\n            x={x}\n            y={y}\n            fill={fill}\n            opacity={opacity}\n            strokeWidth={borderWidth}\n            stroke={borderColor}\n            width={size}\n            height={size}\n            style={{\n                pointerEvents: 'none',\n            }}\n        />\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolTriangle = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <g transform={`translate(${x},${y})`}>\n            <path\n                d={`\n                M${size / 2} 0\n                L${size} ${size}\n                L0 ${size}\n                L${size / 2} 0\n            `}\n                fill={fill}\n                opacity={opacity}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                style={{\n                    pointerEvents: 'none',\n                }}\n            />\n        </g>\n    )\n}\n","import { ContinuousColorsLegendProps } from './types'\n\nexport const continuousColorsLegendDefaults: {\n    length: NonNullable<ContinuousColorsLegendProps['length']>\n    thickness: NonNullable<ContinuousColorsLegendProps['thickness']>\n    direction: NonNullable<ContinuousColorsLegendProps['direction']>\n    tickPosition: NonNullable<ContinuousColorsLegendProps['tickPosition']>\n    tickSize: NonNullable<ContinuousColorsLegendProps['tickSize']>\n    tickSpacing: NonNullable<ContinuousColorsLegendProps['tickSpacing']>\n    tickOverlap: NonNullable<ContinuousColorsLegendProps['tickOverlap']>\n    tickFormat: NonNullable<ContinuousColorsLegendProps['tickFormat']>\n    titleAlign: NonNullable<ContinuousColorsLegendProps['titleAlign']>\n    titleOffset: NonNullable<ContinuousColorsLegendProps['titleOffset']>\n} = {\n    length: 200,\n    thickness: 16,\n    direction: 'row',\n    tickPosition: 'after',\n    tickSize: 4,\n    tickSpacing: 3,\n    tickOverlap: false,\n    tickFormat: (value: number) => `${value}`,\n    titleAlign: 'start',\n    titleOffset: 4,\n}\n","import { scaleLinear } from 'd3-scale'\nimport { getValueFormatter } from '@nivo/core'\nimport { computeContinuousColorScaleColorStops } from '@nivo/colors'\nimport {\n    BoxLegendSvgProps,\n    ContinuousColorsLegendProps,\n    LegendAnchor,\n    LegendItemDirection,\n} from './types'\nimport { continuousColorsLegendDefaults } from './defaults'\n\nconst isObject = <T>(item: unknown): item is T =>\n    typeof item === 'object' && !Array.isArray(item) && item !== null\n\nconst zeroPadding = {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n}\n\nexport const computeDimensions = ({\n    direction,\n    itemsSpacing,\n    padding: _padding,\n    itemCount,\n    itemWidth,\n    itemHeight,\n}: Pick<BoxLegendSvgProps, 'direction' | 'padding'> &\n    Record<'itemsSpacing' | 'itemCount' | 'itemWidth' | 'itemHeight', number>) => {\n    if (typeof _padding !== 'number' && !isObject(_padding)) {\n        throw new Error('Invalid property padding, must be one of: number, object')\n    }\n\n    const padding =\n        typeof _padding === 'number'\n            ? {\n                  top: _padding,\n                  right: _padding,\n                  bottom: _padding,\n                  left: _padding,\n              }\n            : {\n                  ...zeroPadding,\n                  ..._padding,\n              }\n\n    const horizontalPadding = padding.left + padding.right\n    const verticalPadding = padding.top + padding.bottom\n    let width = itemWidth + horizontalPadding\n    let height = itemHeight + verticalPadding\n    const spacing = (itemCount - 1) * itemsSpacing\n    if (direction === 'row') {\n        width = itemWidth * itemCount + spacing + horizontalPadding\n    } else if (direction === 'column') {\n        height = itemHeight * itemCount + spacing + verticalPadding\n    }\n\n    return { width, height, padding }\n}\n\nexport const computePositionFromAnchor = ({\n    anchor,\n    translateX,\n    translateY,\n    containerWidth,\n    containerHeight,\n    width,\n    height,\n}: { anchor: LegendAnchor } & Record<\n    'translateX' | 'translateY' | 'containerWidth' | 'containerHeight' | 'width' | 'height',\n    number\n>) => {\n    let x = translateX\n    let y = translateY\n\n    switch (anchor) {\n        case 'top':\n            x += (containerWidth - width) / 2\n            break\n\n        case 'top-right':\n            x += containerWidth - width\n            break\n\n        case 'right':\n            x += containerWidth - width\n            y += (containerHeight - height) / 2\n            break\n\n        case 'bottom-right':\n            x += containerWidth - width\n            y += containerHeight - height\n            break\n\n        case 'bottom':\n            x += (containerWidth - width) / 2\n            y += containerHeight - height\n            break\n\n        case 'bottom-left':\n            y += containerHeight - height\n            break\n\n        case 'left':\n            y += (containerHeight - height) / 2\n            break\n\n        case 'center':\n            x += (containerWidth - width) / 2\n            y += (containerHeight - height) / 2\n            break\n    }\n\n    return { x, y }\n}\n\nexport const computeItemLayout = ({\n    direction,\n    justify,\n    symbolSize,\n    symbolSpacing,\n    width,\n    height,\n}: {\n    direction: LegendItemDirection\n    justify: boolean\n} & Record<'symbolSize' | 'symbolSpacing' | 'width' | 'height', number>) => {\n    let symbolX\n    let symbolY\n\n    let labelX\n    let labelY\n    let labelAnchor: 'start' | 'middle' | 'end'\n    let labelAlignment: 'alphabetic' | 'central' | 'text-before-edge'\n\n    switch (direction) {\n        case 'left-to-right':\n            symbolX = 0\n            symbolY = (height - symbolSize) / 2\n\n            labelY = height / 2\n            labelAlignment = 'central'\n            if (justify) {\n                labelX = width\n                labelAnchor = 'end'\n            } else {\n                labelX = symbolSize + symbolSpacing\n                labelAnchor = 'start'\n            }\n            break\n\n        case 'right-to-left':\n            symbolX = width - symbolSize\n            symbolY = (height - symbolSize) / 2\n\n            labelY = height / 2\n            labelAlignment = 'central'\n            if (justify) {\n                labelX = 0\n                labelAnchor = 'start'\n            } else {\n                labelX = width - symbolSize - symbolSpacing\n                labelAnchor = 'end'\n            }\n            break\n\n        case 'top-to-bottom':\n            symbolX = (width - symbolSize) / 2\n            symbolY = 0\n\n            labelX = width / 2\n\n            labelAnchor = 'middle'\n            if (justify) {\n                labelY = height\n                labelAlignment = 'alphabetic'\n            } else {\n                labelY = symbolSize + symbolSpacing\n                labelAlignment = 'text-before-edge'\n            }\n            break\n\n        case 'bottom-to-top':\n            symbolX = (width - symbolSize) / 2\n            symbolY = height - symbolSize\n\n            labelX = width / 2\n            labelAnchor = 'middle'\n            if (justify) {\n                labelY = 0\n                labelAlignment = 'text-before-edge'\n            } else {\n                labelY = height - symbolSize - symbolSpacing\n                labelAlignment = 'alphabetic'\n            }\n            break\n    }\n\n    return {\n        symbolX,\n        symbolY,\n        labelX,\n        labelY,\n        labelAnchor,\n        labelAlignment,\n    }\n}\n\nexport const computeContinuousColorsLegend = ({\n    scale,\n    ticks,\n    length = continuousColorsLegendDefaults.length,\n    thickness = continuousColorsLegendDefaults.thickness,\n    direction = continuousColorsLegendDefaults.direction,\n    tickPosition = continuousColorsLegendDefaults.tickPosition,\n    tickSize = continuousColorsLegendDefaults.tickSize,\n    tickSpacing = continuousColorsLegendDefaults.tickSpacing,\n    tickOverlap = continuousColorsLegendDefaults.tickOverlap,\n    tickFormat = continuousColorsLegendDefaults.tickFormat,\n    title,\n    titleAlign = continuousColorsLegendDefaults.titleAlign,\n    titleOffset = continuousColorsLegendDefaults.titleOffset,\n}: ContinuousColorsLegendProps) => {\n    // left to right for `row`, bottom to top for `column`\n    const domain = direction === 'column' ? [...scale.domain()].reverse() : scale.domain()\n\n    const positionScale = scaleLinear().domain(domain)\n    if (domain.length === 2) {\n        // sequential, quantize\n        positionScale.range([0, length])\n    } else if (domain.length === 3) {\n        // diverging\n        positionScale.range([0, length / 2, length])\n    }\n\n    let values: number[]\n    if ('thresholds' in scale) {\n        // quantize\n        values = [domain[0], ...scale.thresholds(), domain[1]]\n    } else {\n        // sequential, diverging\n        values = Array.isArray(ticks) ? ticks : (scale as any).ticks(ticks)\n    }\n\n    const colorStops = computeContinuousColorScaleColorStops(scale, 32)\n\n    const formatValue = getValueFormatter(tickFormat)\n\n    const computedTicks: {\n        x1: number\n        y1: number\n        x2: number\n        y2: number\n        text: string\n        textX: number\n        textY: number\n        textHorizontalAlign: 'start' | 'middle' | 'end'\n        textVerticalAlign: 'alphabetic' | 'central' | 'hanging'\n    }[] = []\n\n    let width: number\n    let height: number\n\n    const gradientX1 = 0\n    let gradientY1 = 0\n    let gradientX2 = 0\n    const gradientY2 = 0\n\n    let titleX: number\n    let titleY: number\n    let titleRotation: number\n    let titleVerticalAlign: 'alphabetic' | 'hanging'\n\n    if (direction === 'row') {\n        width = length\n        height = thickness\n\n        gradientX2 = 1\n\n        let y1: number\n        let y2: number\n\n        let textY: number\n        const textHorizontalAlign = 'middle'\n        let textVerticalAlign: 'alphabetic' | 'hanging'\n\n        titleRotation = 0\n        if (titleAlign === 'start') {\n            titleX = 0\n        } else if (titleAlign === 'middle') {\n            titleX = length / 2\n        } else {\n            titleX = length\n        }\n\n        if (tickPosition === 'before') {\n            y1 = -tickSize\n            y2 = tickOverlap ? thickness : 0\n\n            textY = -tickSize - tickSpacing\n            textVerticalAlign = 'alphabetic'\n\n            titleY = thickness + titleOffset\n            titleVerticalAlign = 'hanging'\n        } else {\n            y1 = tickOverlap ? 0 : thickness\n            y2 = thickness + tickSize\n\n            textY = y2 + tickSpacing\n            textVerticalAlign = 'hanging'\n\n            titleY = -titleOffset\n            titleVerticalAlign = 'alphabetic'\n        }\n\n        values.forEach(value => {\n            const x = positionScale(value)\n\n            computedTicks.push({\n                x1: x,\n                y1,\n                x2: x,\n                y2,\n                text: formatValue(value),\n                textX: x,\n                textY,\n                textHorizontalAlign,\n                textVerticalAlign,\n            })\n        })\n    } else {\n        width = thickness\n        height = length\n\n        gradientY1 = 1\n\n        let x1: number\n        let x2: number\n\n        let textX: number\n        let textHorizontalAlign: 'start' | 'end'\n        const textVerticalAlign = 'central'\n\n        titleRotation = -90\n        if (titleAlign === 'start') {\n            titleY = length\n        } else if (titleAlign === 'middle') {\n            titleY = length / 2\n        } else {\n            titleY = 0\n        }\n\n        if (tickPosition === 'before') {\n            x1 = -tickSize\n            x2 = tickOverlap ? thickness : 0\n\n            textX = x1 - tickSpacing\n            textHorizontalAlign = 'end'\n\n            titleX = thickness + titleOffset\n            titleVerticalAlign = 'hanging'\n        } else {\n            x1 = tickOverlap ? 0 : thickness\n            x2 = thickness + tickSize\n\n            textX = x2 + tickSpacing\n            textHorizontalAlign = 'start'\n\n            titleX = -titleOffset\n            titleVerticalAlign = 'alphabetic'\n        }\n\n        values.forEach(value => {\n            const y = positionScale(value)\n\n            computedTicks.push({\n                x1,\n                y1: y,\n                x2,\n                y2: y,\n                text: formatValue(value),\n                textX,\n                textY: y,\n                textHorizontalAlign,\n                textVerticalAlign,\n            })\n        })\n    }\n\n    return {\n        width,\n        height,\n        gradientX1,\n        gradientY1,\n        gradientX2,\n        gradientY2,\n        colorStops,\n        ticks: computedTicks,\n        titleText: title,\n        titleX,\n        titleY,\n        titleRotation,\n        titleHorizontalAlign: titleAlign,\n        titleVerticalAlign,\n    }\n}\n","import { Fragment } from 'react'\nimport { useTheme } from '@nivo/core'\nimport { computeContinuousColorsLegend } from '../compute'\nimport { ContinuousColorsLegendProps } from '../types'\nimport { continuousColorsLegendDefaults } from '../defaults'\n\nexport const ContinuousColorsLegendSvg = ({\n    scale,\n    ticks,\n    length = continuousColorsLegendDefaults.length,\n    thickness = continuousColorsLegendDefaults.thickness,\n    direction = continuousColorsLegendDefaults.direction,\n    tickPosition = continuousColorsLegendDefaults.tickPosition,\n    tickSize = continuousColorsLegendDefaults.tickSize,\n    tickSpacing = continuousColorsLegendDefaults.tickSpacing,\n    tickOverlap = continuousColorsLegendDefaults.tickOverlap,\n    tickFormat = continuousColorsLegendDefaults.tickFormat,\n    title,\n    titleAlign = continuousColorsLegendDefaults.titleAlign,\n    titleOffset = continuousColorsLegendDefaults.titleOffset,\n}: ContinuousColorsLegendProps) => {\n    const {\n        width,\n        height,\n        gradientX1,\n        gradientY1,\n        gradientX2,\n        gradientY2,\n        ticks: computedTicks,\n        colorStops,\n        titleText,\n        titleX,\n        titleY,\n        titleRotation,\n        titleVerticalAlign,\n        titleHorizontalAlign,\n    } = computeContinuousColorsLegend({\n        scale,\n        ticks,\n        length,\n        thickness,\n        direction,\n        tickPosition,\n        tickSize,\n        tickSpacing,\n        tickOverlap,\n        tickFormat,\n        title,\n        titleAlign,\n        titleOffset,\n    })\n\n    const theme = useTheme()\n\n    // remove commas, parentheses and spaces from stop color, this will then create a unique id depending on which color scheme you use.\n    // so if you have two or more heatmaps on a single page with differing color schemes the legend will be correct for each.\n    const id = `ContinuousColorsLegendSvgGradient.${direction}.${colorStops\n        .map(stop => `${stop.stopColor.replace(/[(),\\s]/g, '')}.${stop.offset}`)\n        .join('_')}`\n\n    return (\n        <g>\n            <defs>\n                <linearGradient\n                    id={id}\n                    x1={gradientX1}\n                    y1={gradientY1}\n                    x2={gradientX2}\n                    y2={gradientY2}\n                >\n                    {colorStops.map(colorStop => (\n                        <stop\n                            key={colorStop.key}\n                            offset={colorStop.offset}\n                            stopColor={colorStop.stopColor}\n                        />\n                    ))}\n                </linearGradient>\n            </defs>\n            {titleText && (\n                <text\n                    transform={`translate(${titleX}, ${titleY}) rotate(${titleRotation})`}\n                    textAnchor={titleHorizontalAlign}\n                    dominantBaseline={titleVerticalAlign}\n                    style={theme.legends.title.text}\n                >\n                    {titleText}\n                </text>\n            )}\n            <rect width={width} height={height} fill={`url(#${id}`} />\n            {computedTicks.map((tick, index) => (\n                <Fragment key={index}>\n                    <line\n                        x1={tick.x1}\n                        y1={tick.y1}\n                        x2={tick.x2}\n                        y2={tick.y2}\n                        style={theme.legends.ticks.line}\n                    />\n                    <text\n                        x={tick.textX}\n                        y={tick.textY}\n                        textAnchor={tick.textHorizontalAlign}\n                        dominantBaseline={tick.textVerticalAlign}\n                        style={theme.legends.ticks.text}\n                    >\n                        {tick.text}\n                    </text>\n                </Fragment>\n            ))}\n        </g>\n    )\n}\n","import { AnchoredContinuousColorsLegendProps } from '../types'\nimport { computePositionFromAnchor } from '../compute'\nimport { continuousColorsLegendDefaults } from '../defaults'\nimport { ContinuousColorsLegendSvg } from './ContinuousColorsLegendSvg'\n\nexport const AnchoredContinuousColorsLegendSvg = ({\n    containerWidth,\n    containerHeight,\n    anchor,\n    translateX = 0,\n    translateY = 0,\n    length = continuousColorsLegendDefaults.length,\n    thickness = continuousColorsLegendDefaults.thickness,\n    direction = continuousColorsLegendDefaults.direction,\n    ...legendProps\n}: AnchoredContinuousColorsLegendProps) => {\n    let width: number\n    let height: number\n    if (direction === 'row') {\n        width = length\n        height = thickness\n    } else {\n        width = thickness\n        height = length\n    }\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    return (\n        <g transform={`translate(${x}, ${y})`}>\n            <ContinuousColorsLegendSvg\n                length={length}\n                thickness={thickness}\n                direction={direction}\n                {...legendProps}\n            />\n        </g>\n    )\n}\n","import { useState, useCallback } from 'react'\nimport * as React from 'react'\nimport { useTheme, sanitizeSvgTextStyle } from '@nivo/core'\nimport { LegendSvgItemProps } from '../types'\nimport { computeItemLayout } from '../compute'\nimport { SymbolCircle, SymbolDiamond, SymbolSquare, SymbolTriangle } from './symbols'\n\ntype Style = Partial<{\n    itemBackground: string\n    itemOpacity: number\n    itemTextColor: string\n    symbolBorderColor: string\n    symbolBorderWidth: number\n    symbolSize: number\n}>\n\nconst symbolByShape = {\n    circle: SymbolCircle,\n    diamond: SymbolDiamond,\n    square: SymbolSquare,\n    triangle: SymbolTriangle,\n}\n\nexport const LegendSvgItem = ({\n    x,\n    y,\n    width,\n    height,\n    data,\n    direction = 'left-to-right',\n    justify = false,\n    textColor,\n    background = 'transparent',\n    opacity = 1,\n\n    symbolShape = 'square',\n    symbolSize = 16,\n    symbolSpacing = 8,\n    symbolBorderWidth = 0,\n    symbolBorderColor = 'transparent',\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n\n    effects,\n}: LegendSvgItemProps) => {\n    const [style, setStyle] = useState<Style>({})\n    const theme = useTheme()\n\n    const handleMouseEnter = useCallback(\n        (event: React.MouseEvent<SVGRectElement>) => {\n            if (effects) {\n                const applyEffects = effects.filter(({ on }) => on === 'hover')\n                const style = applyEffects.reduce(\n                    (acc, effect) => ({\n                        ...acc,\n                        ...effect.style,\n                    }),\n                    {}\n                )\n                setStyle(style)\n            }\n\n            onMouseEnter?.(data, event)\n        },\n        [onMouseEnter, data, effects]\n    )\n    const handleMouseLeave = useCallback(\n        (event: React.MouseEvent<SVGRectElement>) => {\n            if (effects) {\n                const applyEffects = effects.filter(({ on }) => on !== 'hover')\n                const style = applyEffects.reduce(\n                    (acc, effect) => ({\n                        ...acc,\n                        ...effect.style,\n                    }),\n                    {}\n                )\n                setStyle(style)\n            }\n\n            onMouseLeave?.(data, event)\n        },\n        [onMouseLeave, data, effects]\n    )\n\n    const { symbolX, symbolY, labelX, labelY, labelAnchor, labelAlignment } = computeItemLayout({\n        direction,\n        justify,\n        symbolSize: style.symbolSize ?? symbolSize,\n        symbolSpacing,\n        width,\n        height,\n    })\n\n    const isInteractive = [onClick, onMouseEnter, onMouseLeave, toggleSerie].some(\n        handler => handler !== undefined\n    )\n\n    const SymbolShape = typeof symbolShape === 'function' ? symbolShape : symbolByShape[symbolShape]\n\n    return (\n        <g\n            transform={`translate(${x},${y})`}\n            style={{\n                opacity: style.itemOpacity ?? opacity,\n            }}\n        >\n            <rect\n                width={width}\n                height={height}\n                fill={style.itemBackground ?? background}\n                style={{\n                    cursor: isInteractive ? 'pointer' : 'auto',\n                }}\n                onClick={event => {\n                    onClick?.(data, event)\n                    toggleSerie?.(data.id)\n                }}\n                onMouseEnter={handleMouseEnter}\n                onMouseLeave={handleMouseLeave}\n            />\n            {React.createElement(SymbolShape, {\n                id: data.id,\n                x: symbolX,\n                y: symbolY,\n                size: style.symbolSize ?? symbolSize,\n                fill: data.fill ?? data.color ?? 'black',\n                borderWidth: style.symbolBorderWidth ?? symbolBorderWidth,\n                borderColor: style.symbolBorderColor ?? symbolBorderColor,\n                ...(data.hidden ? theme.legends.hidden.symbol : undefined),\n            })}\n            <text\n                textAnchor={labelAnchor}\n                style={{\n                    ...sanitizeSvgTextStyle(theme.legends.text),\n                    fill: style.itemTextColor ?? textColor ?? theme.legends.text.fill ?? 'black',\n                    dominantBaseline: labelAlignment,\n                    pointerEvents: 'none',\n                    userSelect: 'none',\n                    ...(data.hidden ? theme.legends.hidden.text : undefined),\n                }}\n                x={labelX}\n                y={labelY}\n            >\n                {data.label}\n            </text>\n        </g>\n    )\n}\n","import { LegendSvgItem } from './LegendSvgItem'\nimport { LegendSvgProps } from '../types'\nimport { computeDimensions } from '../compute'\n\nexport const LegendSvg = ({\n    data,\n\n    x,\n    y,\n    direction,\n    padding: _padding = 0,\n    justify,\n    effects,\n\n    itemWidth,\n    itemHeight,\n    itemDirection = 'left-to-right',\n    itemsSpacing = 0,\n    itemTextColor,\n    itemBackground = 'transparent',\n    itemOpacity = 1,\n\n    symbolShape,\n    symbolSize,\n    symbolSpacing,\n    symbolBorderWidth,\n    symbolBorderColor,\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n}: LegendSvgProps) => {\n    const { padding } = computeDimensions({\n        itemCount: data.length,\n        itemWidth,\n        itemHeight,\n        itemsSpacing,\n        direction,\n        padding: _padding,\n    })\n\n    const xStep = direction === 'row' ? itemWidth + itemsSpacing : 0\n    const yStep = direction === 'column' ? itemHeight + itemsSpacing : 0\n\n    return (\n        <g transform={`translate(${x},${y})`}>\n            {data.map((data, i) => (\n                <LegendSvgItem\n                    key={i}\n                    data={data}\n                    x={i * xStep + padding.left}\n                    y={i * yStep + padding.top}\n                    width={itemWidth}\n                    height={itemHeight}\n                    direction={itemDirection}\n                    justify={justify}\n                    effects={effects}\n                    textColor={itemTextColor}\n                    background={itemBackground}\n                    opacity={itemOpacity}\n                    symbolShape={symbolShape}\n                    symbolSize={symbolSize}\n                    symbolSpacing={symbolSpacing}\n                    symbolBorderWidth={symbolBorderWidth}\n                    symbolBorderColor={symbolBorderColor}\n                    onClick={onClick}\n                    onMouseEnter={onMouseEnter}\n                    onMouseLeave={onMouseLeave}\n                    toggleSerie={toggleSerie}\n                />\n            ))}\n        </g>\n    )\n}\n","import { LegendSvg } from './LegendSvg'\nimport { BoxLegendSvgProps } from '../types'\nimport { computeDimensions, computePositionFromAnchor } from '../compute'\n\nexport const BoxLegendSvg = ({\n    data,\n\n    containerWidth,\n    containerHeight,\n    translateX = 0,\n    translateY = 0,\n    anchor,\n    direction,\n    padding = 0,\n    justify,\n\n    itemsSpacing = 0,\n    itemWidth,\n    itemHeight,\n    itemDirection,\n    itemTextColor,\n    itemBackground,\n    itemOpacity,\n\n    symbolShape,\n    symbolSize,\n    symbolSpacing,\n    symbolBorderWidth,\n    symbolBorderColor,\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n\n    effects,\n}: BoxLegendSvgProps) => {\n    const { width, height } = computeDimensions({\n        itemCount: data.length,\n        itemsSpacing,\n        itemWidth,\n        itemHeight,\n        direction,\n        padding,\n    })\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    return (\n        <LegendSvg\n            data={data}\n            x={x}\n            y={y}\n            direction={direction}\n            padding={padding}\n            justify={justify}\n            effects={effects}\n            itemsSpacing={itemsSpacing}\n            itemWidth={itemWidth}\n            itemHeight={itemHeight}\n            itemDirection={itemDirection}\n            itemTextColor={itemTextColor}\n            itemBackground={itemBackground}\n            itemOpacity={itemOpacity}\n            symbolShape={symbolShape}\n            symbolSize={symbolSize}\n            symbolSpacing={symbolSpacing}\n            symbolBorderWidth={symbolBorderWidth}\n            symbolBorderColor={symbolBorderColor}\n            onClick={onClick}\n            onMouseEnter={onMouseEnter}\n            onMouseLeave={onMouseLeave}\n            toggleSerie={typeof toggleSerie === 'boolean' ? undefined : toggleSerie}\n        />\n    )\n}\n","import { CompleteTheme, degreesToRadians } from '@nivo/core'\nimport {\n    computeDimensions,\n    computePositionFromAnchor,\n    computeItemLayout,\n    computeContinuousColorsLegend,\n} from './compute'\nimport { AnchoredContinuousColorsLegendProps, LegendCanvasProps } from './types'\nimport { continuousColorsLegendDefaults } from './defaults'\n\nconst textAlignMapping = {\n    start: 'left',\n    middle: 'center',\n    end: 'right',\n} as const\n\nexport const renderLegendToCanvas = (\n    ctx: CanvasRenderingContext2D,\n    {\n        data,\n\n        containerWidth,\n        containerHeight,\n        translateX = 0,\n        translateY = 0,\n        anchor,\n        direction,\n        padding: _padding = 0,\n        justify = false,\n\n        // items\n        itemsSpacing = 0,\n        itemWidth,\n        itemHeight,\n        itemDirection = 'left-to-right',\n        itemTextColor,\n\n        // symbol\n        symbolSize = 16,\n        symbolSpacing = 8,\n        // @todo add support for shapes\n        // symbolShape = LegendSvgItem.defaultProps.symbolShape,\n\n        theme,\n    }: LegendCanvasProps\n) => {\n    const { width, height, padding } = computeDimensions({\n        itemCount: data.length,\n        itemWidth,\n        itemHeight,\n        itemsSpacing,\n        direction,\n        padding: _padding,\n    })\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    const xStep = direction === 'row' ? itemWidth + itemsSpacing : 0\n    const yStep = direction === 'column' ? itemHeight + itemsSpacing : 0\n\n    ctx.save()\n    ctx.translate(x, y)\n\n    ctx.font = `${theme.legends.text.fontSize}px ${theme.legends.text.fontFamily || 'sans-serif'}`\n\n    data.forEach((d, i) => {\n        const itemX = i * xStep + padding.left\n        const itemY = i * yStep + padding.top\n\n        const { symbolX, symbolY, labelX, labelY, labelAnchor, labelAlignment } = computeItemLayout(\n            {\n                direction: itemDirection,\n                justify,\n                symbolSize,\n                symbolSpacing,\n                width: itemWidth,\n                height: itemHeight,\n            }\n        )\n\n        ctx.fillStyle = d.color ?? 'black'\n        ctx.fillRect(itemX + symbolX, itemY + symbolY, symbolSize, symbolSize)\n\n        ctx.textAlign = textAlignMapping[labelAnchor]\n\n        if (labelAlignment === 'central') {\n            ctx.textBaseline = 'middle'\n        }\n\n        ctx.fillStyle = itemTextColor ?? theme.legends.text.fill ?? 'black'\n        ctx.fillText(String(d.label), itemX + labelX, itemY + labelY)\n    })\n\n    ctx.restore()\n}\n\nexport const renderContinuousColorLegendToCanvas = (\n    ctx: CanvasRenderingContext2D,\n    {\n        containerWidth,\n        containerHeight,\n        anchor,\n        translateX = 0,\n        translateY = 0,\n        scale,\n        length = continuousColorsLegendDefaults.length,\n        thickness = continuousColorsLegendDefaults.thickness,\n        direction = continuousColorsLegendDefaults.direction,\n        ticks: _ticks,\n        tickPosition = continuousColorsLegendDefaults.tickPosition,\n        tickSize = continuousColorsLegendDefaults.tickSize,\n        tickSpacing = continuousColorsLegendDefaults.tickSpacing,\n        tickOverlap = continuousColorsLegendDefaults.tickOverlap,\n        tickFormat = continuousColorsLegendDefaults.tickFormat,\n        title,\n        titleAlign = continuousColorsLegendDefaults.titleAlign,\n        titleOffset = continuousColorsLegendDefaults.titleOffset,\n        theme,\n    }: AnchoredContinuousColorsLegendProps & {\n        theme: CompleteTheme\n    }\n) => {\n    const {\n        width,\n        height,\n        gradientX1,\n        gradientY1,\n        gradientX2,\n        gradientY2,\n        colorStops,\n        ticks,\n        titleText,\n        titleX,\n        titleY,\n        titleRotation,\n        titleVerticalAlign,\n        titleHorizontalAlign,\n    } = computeContinuousColorsLegend({\n        scale,\n        ticks: _ticks,\n        length,\n        thickness,\n        direction,\n        tickPosition,\n        tickSize,\n        tickSpacing,\n        tickOverlap,\n        tickFormat,\n        title,\n        titleAlign,\n        titleOffset,\n    })\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    const initialStyles = {\n        font: ctx.font,\n        textAlign: ctx.textAlign,\n        textBaseline: ctx.textBaseline,\n    }\n    ctx.save()\n\n    ctx.translate(x, y)\n\n    const gradient = ctx.createLinearGradient(\n        gradientX1 * width,\n        gradientY1 * height,\n        gradientX2 * width,\n        gradientY2 * height\n    )\n    colorStops.forEach(colorStop => {\n        gradient.addColorStop(colorStop.offset, colorStop.stopColor)\n    })\n\n    ctx.fillStyle = gradient\n    ctx.fillRect(0, 0, width, height)\n\n    ctx.font = `${\n        theme.legends.ticks.text.fontWeight ? `${theme.legends.ticks.text.fontWeight} ` : ''\n    }${theme.legends.ticks.text.fontSize}px ${theme.legends.ticks.text.fontFamily}`\n\n    ticks.forEach(tick => {\n        if ((theme.legends.ticks.line.strokeWidth ?? 0) > 0) {\n            ctx.lineWidth = Number(theme.axis.ticks.line.strokeWidth)\n            if (theme.axis.ticks.line.stroke) {\n                ctx.strokeStyle = theme.axis.ticks.line.stroke\n            }\n            ctx.lineCap = 'square'\n\n            ctx.beginPath()\n            ctx.moveTo(tick.x1, tick.y1)\n            ctx.lineTo(tick.x2, tick.y2)\n            ctx.stroke()\n        }\n\n        if (theme.legends.ticks.text.fill) {\n            ctx.fillStyle = theme.legends.ticks.text.fill\n        }\n        ctx.textAlign = tick.textHorizontalAlign === 'middle' ? 'center' : tick.textHorizontalAlign\n        ctx.textBaseline = tick.textVerticalAlign === 'central' ? 'middle' : tick.textVerticalAlign\n\n        ctx.fillText(tick.text, tick.textX, tick.textY)\n    })\n\n    if (titleText) {\n        ctx.save()\n        ctx.translate(titleX, titleY)\n        ctx.rotate(degreesToRadians(titleRotation))\n\n        ctx.font = `${\n            theme.legends.title.text.fontWeight ? `${theme.legends.title.text.fontWeight} ` : ''\n        }${theme.legends.title.text.fontSize}px ${theme.legends.title.text.fontFamily}`\n        if (theme.legends.title.text.fill) {\n            ctx.fillStyle = theme.legends.title.text.fill\n        }\n        ctx.textAlign = titleHorizontalAlign === 'middle' ? 'center' : titleHorizontalAlign\n        ctx.textBaseline = titleVerticalAlign\n\n        ctx.fillText(titleText, 0, 0)\n\n        ctx.restore()\n    }\n\n    ctx.restore()\n\n    ctx.font = initialStyles.font\n    ctx.textAlign = initialStyles.textAlign\n    ctx.textBaseline = initialStyles.textBaseline\n}\n","import { useMemo } from 'react'\n\ntype Scale = {\n    (value: number): number\n    invertExtent: (value: number) => [number, number]\n    range: () => number[]\n}\n\nexport const useQuantizeColorScaleLegendData = ({\n    scale,\n    domain: overriddenDomain,\n    reverse = false,\n    valueFormat = v => v,\n    separator = ' - ',\n}: {\n    scale: Scale\n    domain?: number[]\n    reverse?: boolean\n    valueFormat?: <T, U>(value: T) => T | U\n    separator?: string\n}) => {\n    return useMemo(() => {\n        const domain = overriddenDomain ?? scale.range()\n\n        const items = domain.map((domainValue, index) => {\n            const [start, end] = scale.invertExtent(domainValue)\n\n            return {\n                id: domainValue,\n                index,\n                extent: [start, end],\n                label: `${valueFormat(start)}${separator}${valueFormat(end)}`,\n                value: scale(start),\n                color: domainValue,\n            }\n        })\n\n        if (reverse) items.reverse()\n\n        return items\n    }, [overriddenDomain, scale, reverse, separator, valueFormat])\n}\n"],"names":["SymbolCircle","_ref","x","y","size","fill","_ref$opacity","opacity","_ref$borderWidth","borderWidth","_ref$borderColor","borderColor","_jsx","r","cx","cy","strokeWidth","stroke","style","pointerEvents","SymbolDiamond","transform","children","d","SymbolSquare","width","height","SymbolTriangle","continuousColorsLegendDefaults","length","thickness","direction","tickPosition","tickSize","tickSpacing","tickOverlap","tickFormat","value","titleAlign","titleOffset","zeroPadding","top","right","bottom","left","computeDimensions","item","itemsSpacing","_padding","padding","itemCount","itemWidth","itemHeight","Array","isArray","Error","_extends","horizontalPadding","verticalPadding","spacing","computePositionFromAnchor","_ref2","anchor","translateX","translateY","containerWidth","containerHeight","computeItemLayout","_ref3","symbolX","symbolY","labelX","labelY","labelAnchor","labelAlignment","justify","symbolSize","symbolSpacing","computeContinuousColorsLegend","_ref4","values","scale","ticks","_ref4$length","_ref4$thickness","_ref4$direction","_ref4$tickPosition","_ref4$tickSize","_ref4$tickSpacing","_ref4$tickOverlap","_ref4$tickFormat","title","_ref4$titleAlign","_ref4$titleOffset","domain","concat","reverse","positionScale","scaleLinear","range","thresholds","titleX","titleY","titleRotation","titleVerticalAlign","colorStops","computeContinuousColorScaleColorStops","formatValue","getValueFormatter","computedTicks","gradientY1","gradientX2","y1","y2","textY","textVerticalAlign","forEach","push","x1","x2","text","textX","textHorizontalAlign","gradientX1","gradientY2","titleText","titleHorizontalAlign","ContinuousColorsLegendSvg","_ref$length","_ref$thickness","_ref$direction","_ref$tickPosition","_ref$tickSize","_ref$tickSpacing","_ref$tickOverlap","_ref$tickFormat","_ref$titleAlign","_ref$titleOffset","_computeContinuousCol","theme","useTheme","id","map","stop","stopColor","replace","offset","join","_jsxs","colorStop","key","textAnchor","dominantBaseline","legends","tick","index","Fragment","line","AnchoredContinuousColorsLegendSvg","_ref$translateX","_ref$translateY","legendProps","_objectWithoutPropertiesLoose","_excluded","_computePositionFromA","symbolByShape","circle","diamond","square","triangle","LegendSvgItem","_style$symbolSize","_style$itemOpacity","_style$itemBackground","_style$symbolSize2","_data$fill","_style$symbolBorderWi","_style$symbolBorderCo","_ref5","_ref6","_style$itemTextColor","data","_ref$justify","textColor","_ref$background","background","_ref$symbolShape","symbolShape","_ref$symbolSize","_ref$symbolSpacing","_ref$symbolBorderWidt","symbolBorderWidth","_ref$symbolBorderColo","symbolBorderColor","onClick","onMouseEnter","onMouseLeave","toggleSerie","effects","_useState","useState","setStyle","handleMouseEnter","useCallback","event","filter","on","reduce","acc","effect","handleMouseLeave","_computeItemLayout","isInteractive","some","handler","undefined","SymbolShape","itemOpacity","itemBackground","cursor","React","createElement","color","hidden","symbol","sanitizeSvgTextStyle","itemTextColor","userSelect","label","LegendSvg","_ref$padding","_ref$itemDirection","itemDirection","_ref$itemsSpacing","_ref$itemBackground","_ref$itemOpacity","xStep","yStep","i","BoxLegendSvg","_computeDimensions","textAlignMapping","start","middle","end","renderLegendToCanvas","ctx","save","translate","font","fontSize","fontFamily","_d$color","itemX","itemY","fillStyle","fillRect","textAlign","textBaseline","fillText","String","restore","renderContinuousColorLegendToCanvas","_ref3$translateX","_ref3$translateY","_ref3$length","_ref3$thickness","_ref3$direction","_ticks","_ref3$tickPosition","_ref3$tickSize","_ref3$tickSpacing","_ref3$tickOverlap","_ref3$tickFormat","_ref3$titleAlign","_ref3$titleOffset","_computePositionFromA2","initialStyles","gradient","createLinearGradient","addColorStop","fontWeight","_theme$legends$ticks$","lineWidth","Number","axis","strokeStyle","lineCap","beginPath","moveTo","lineTo","rotate","degreesToRadians","useQuantizeColorScaleLegendData","overriddenDomain","_ref$reverse","_ref$valueFormat","valueFormat","v","_ref$separator","separator","useMemo","items","domainValue","_scale$invertExtent","invertExtent","extent"],"mappings":"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"}